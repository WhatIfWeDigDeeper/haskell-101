1
00:00:00,919 --> 00:00:05,180
Welcome back. What we are going to do now

2
00:00:05,180 --> 00:00:09,240
is we are going to look at recursive
types. When we

3
00:00:09,240 --> 00:00:13,920
looked at type synonyms, we tried
to declare

4
00:00:13,920 --> 00:00:17,449
a recursive type synonym, but we noticed
that

5
00:00:17,449 --> 00:00:20,779
that didn't work. And then I explained
that

6
00:00:20,779 --> 00:00:24,680
when you want to create a recursive
type, it has to go

7
00:00:24,680 --> 00:00:27,720
via a nominal type. And what we are
going to do

8
00:00:27,720 --> 00:00:32,029
in this part of the lecture, is we are
going to look at

9
00:00:32,029 --> 00:00:35,940
a few recursive types.

10
00:00:35,940 --> 00:00:39,530
And the recursive type that we are
going to look at

11
00:00:39,530 --> 00:00:43,649
first, is the type of natural numbers

12
00:00:43,649 --> 00:00:47,180
of integers. If you recall

13
00:00:47,180 --> 00:00:51,140
the lecture on recursive functions, what
we did

14
00:00:51,140 --> 00:00:55,960
there when we defined a recursive
function over integers

15
00:00:55,960 --> 00:00:59,640
we said: an integer can be either zero

16
00:00:59,640 --> 00:01:05,400
or it could be the successor of an
integer, and since we don't have

17
00:01:05,400 --> 00:01:08,470
n+k patterns anymore in Haskell,
we would have to write

18
00:01:08,470 --> 00:01:14,060
n-1 on the right hand side. But if we
represent

19
00:01:14,060 --> 00:01:17,860
integers in this way, we can write

20
00:01:17,860 --> 00:01:21,270
nice recursive functions on these two
cases.

21
00:01:21,270 --> 00:01:25,460
It is either Zero or the successor of a
natural number.

22
00:01:25,460 --> 00:01:29,670
So a natural number is either Zero

23
00:01:29,670 --> 00:01:32,710
or it is one more than

24
00:01:32,710 --> 00:01:36,240
another natural number. And if you look
at the

25
00:01:36,240 --> 00:01:41,560
types of the constructors: Zero is a
function that takes no arguments and

26
00:01:41,560 --> 00:01:43,140
returns a natural number

27
00:01:43,140 --> 00:01:47,119
and Succ is a function that takes a
natural number

28
00:01:47,119 --> 00:01:51,649
and returns another natural number. That's
the types you see there

29
00:01:51,649 --> 00:01:56,520
on the bottom.

30
00:01:56,520 --> 00:01:59,439
So if we look

31
00:01:59,439 --> 00:02:03,450
at all the values of this type Succ

32
00:02:03,450 --> 00:02:07,759
you will see that it starts at Zero, that
is the base case, then we have Succ Zero

33
00:02:07,759 --> 00:02:09,590
and Succ (Succ Zero)

34
00:02:09,590 --> 00:02:16,040
et cetera. I mentioned before that we are
glossing over

35
00:02:16,040 --> 00:02:20,640
certain details here, because one of
the values

36
00:02:20,640 --> 00:02:24,040
that we can also have is

37
00:02:24,040 --> 00:02:28,420
undefined, but since this is just an
introductory

38
00:02:28,420 --> 00:02:32,579
course, I'm not going to talk about
undefined and bottom.

39
00:02:32,579 --> 00:02:35,810
And typically it is

40
00:02:35,810 --> 00:02:39,290
perfectly safe to do. This is the

41
00:02:39,290 --> 00:02:42,750
infinite set of values in type

42
00:02:42,750 --> 00:02:47,720
Nat.

43
00:02:47,720 --> 00:02:50,959
As I said:

44
00:02:50,959 --> 00:02:54,000
this recursive type represents

45
00:02:54,000 --> 00:02:58,109
numbers and what we can do is we can
take an instance

46
00:02:58,109 --> 00:03:02,579
of this Nat type and map it

47
00:03:02,579 --> 00:03:07,260
to an integer. And the way we do that
is we can

48
00:03:07,260 --> 00:03:11,660
turn every occurrence of the Succ
constructor into 1

49
00:03:11,660 --> 00:03:15,519
and every occurence of Zero into 0.

50
00:03:15,519 --> 00:03:19,329
And you see that we maintain the same
structure

51
00:03:19,329 --> 00:03:24,069
and we add those up and we get 3.
So what we can do

52
00:03:24,069 --> 00:03:27,650
is you see that this is a homomorphism
from

53
00:03:27,650 --> 00:03:30,919
Nat to integers and

54
00:03:30,919 --> 00:03:34,079
we can define that just like we defined
foldr

55
00:03:34,079 --> 00:03:37,669
over lists, we can define this
function

56
00:03:37,669 --> 00:03:40,739
using foldr over natural numbers.

57
00:03:40,739 --> 00:03:44,200
For now

58
00:03:44,200 --> 00:03:48,000
we are going to do it recursively. So
here is a function that goes from

59
00:03:48,000 --> 00:03:52,829
Nat to Int. nat2int of Zero is 0

60
00:03:52,829 --> 00:03:56,150
and nat2int of n+1

61
00:03:56,150 --> 00:03:59,269
is

62
00:03:59,269 --> 00:04:02,569
nat2int of n plus 1.

63
00:04:02,569 --> 00:04:06,450
And we can go the other way around. If we
get an integer

64
00:04:06,450 --> 00:04:09,900
we can get a natural number.

65
00:04:09,900 --> 00:04:13,019
0 becomes Zero and here you see

66
00:04:13,019 --> 00:04:17,669
where I miss n+k patterns
n becomes the Succ

67
00:04:17,669 --> 00:04:22,720
of int n-1. It would be much nicer
if this would be

68
00:04:22,720 --> 00:04:26,300
n+1 is the Succ of int2nat of n.

69
00:04:26,300 --> 00:04:29,330
But we have to

70
00:04:29,330 --> 00:04:32,639
respect the decisions that the

71
00:04:32,639 --> 00:04:36,020
current Haskell committee makes.

72
00:04:36,020 --> 00:04:39,780
What you can do is you can try to
prove

73
00:04:39,780 --> 00:04:44,470
that these functions are inverses and
then you can show that Nat

74
00:04:44,470 --> 00:04:48,290
is isomorphic to Int.

75
00:04:48,290 --> 00:04:52,500
And of course we are
shoveling the fact that there are

76
00:04:52,500 --> 00:04:59,500
bottoms involved here under the carpet.
Given two naturals, we can

77
00:04:59,680 --> 00:05:03,419
add them up by first converting them to
integers

78
00:05:03,419 --> 00:05:06,960
and then converting them back to Nats.

79
00:05:06,960 --> 00:05:10,610
That is

80
00:05:10,610 --> 00:05:13,919
really brute force.

81
00:05:13,919 --> 00:05:17,320
We have these natural numbers

82
00:05:17,320 --> 00:05:21,850
we are going to convert them to integers,
add them up and then convert the result

83
00:05:21,850 --> 00:05:22,350
back.

84
00:05:22,350 --> 00:05:27,060
So we take a natural number,
convert it to an integer

85
00:05:27,060 --> 00:05:30,410
take the other one, convert it to an
integer, add them up

86
00:05:30,410 --> 00:05:35,010
convert it back. That is not very
efficient, so instead

87
00:05:35,010 --> 00:05:38,010
we can define this directly

88
00:05:38,010 --> 00:05:41,630
by induction over the natural numbers.
If we

89
00:05:41,630 --> 00:05:44,800
add Zero to n, that is the same as n

90
00:05:44,800 --> 00:05:48,729
and if we add m+1 to n

91
00:05:48,729 --> 00:05:52,780
that is m plus n plus one.

92
00:05:52,780 --> 00:05:56,190
And that is the definition that you see

93
00:05:56,190 --> 00:06:00,780
here. So I think this one is much more
elegant

94
00:06:00,780 --> 00:06:03,910
than this one, but they are

95
00:06:03,910 --> 00:06:08,010
equivalent. If we

96
00:06:08,010 --> 00:06:12,150
execute an example, so we want to add

97
00:06:12,150 --> 00:06:13,670
two

98
00:06:13,670 --> 00:06:16,270
to one. Let's see:

99
00:06:16,270 --> 00:06:19,450
We recursively

100
00:06:19,450 --> 00:06:22,810
push the addition inside and

101
00:06:22,810 --> 00:06:27,110
take one of these Succs outside.

102
00:06:27,110 --> 00:06:31,530
We do that several times, so you see
that the add gets pushed pushed pushed

103
00:06:31,530 --> 00:06:35,050
inside until it hits the

104
00:06:35,050 --> 00:06:38,210
Zero. And that's Zero and there we go.

105
00:06:38,210 --> 00:06:41,470
If we add two plus one

106
00:06:41,470 --> 00:06:44,670
we get three.

107
00:06:44,670 --> 00:06:49,100
So that was the end of part 2

108
00:06:49,100 --> 00:06:52,600
and I'll see you in a few minutes

109
00:06:52,600 --> 00:06:54,560
where we are going to talk about
type classes.

